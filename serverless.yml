service: reto-indra-swapi

plugins:
  - serverless-offline
  - serverless-openapi-documentation
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'} 
  region: us-east-1
  apiGateway:
      shouldStartNameWithService: true
  environment:
    PERSONAJES_TABLE: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"

functions:
  obtenerPersonaje:
    handler: dist/handler.handler
    events:
      - http:
          path: personajes/{id}
          method: get
          documentation:
            summary: "Obtener personajes por ID"
            description: "Esta función obtiene un personaje por ID primero de api-externo y luego de la base de datos (dynamondb)"
  crearPersonaje:
    handler: dist/handler.handler
    events:
      - http:
          path: personajes
          method: post
          documentation:
            summary: "Crear personaje"
            description: "Esta función crea un nuevo personaje en la base de datos"

resources:
  Resources:
    PersonajeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

package:
  exclude:
    - src/**
    - .gitignore
    - .eslintrc.js
    - .prettierrc.js
    - image.png
    - README.md
  include:
    - dist/**
    - node_modules/**


custom:
  tableName: ${self:service}-${self:provider.stage}-personaje
  serverless-offline:
    allowCache: true
    httpPort: 3005
    useLocalDB: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      dpPath: ./.dynamodb